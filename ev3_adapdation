#!/usr/bin/env pybricks-micropython
from pybricks.hubs import EV3Brick
from pybricks.ev3devices import (Motor, TouchSensor, ColorSensor, InfraredSensor, UltrasonicSensor, GyroSensor)
from pybricks.parameters import Port, Stop, Direction, Button, Color
from pybricks.tools import wait, StopWatch, DataLog
from pybricks.robotics import DriveBase
from pybricks.media.ev3dev import SoundFile, ImageFile

# Create your objects here.
ev3 = EV3Brick()

class MotorPair:
    def __init__(self, port1, port2):
        self.motor1 = Motor(port1)
        self.motor2 = Motor(port2)
        self.timer = StopWatch()
    def move_angle(self,amount,speed1,speed2, timeout = 1000):
        self.motor1.reset_angle(0)
        self.motor2.reset_angle(0)
        self.timer.reset()
        while abs(self.motor1.angle()) < amount or self.timer.time() < timeout:
            while abs(self.motor2.angle()) < amount or self.timer.time() < timeout:
                self.motor1.run(speed1)
                self.motor2.run(-(speed2))
        self.motor1.stop()
        self.motor2.stop()
        return "succeded"
    def move_tank(self,amount, speed1, speed2):    
        self.motor1.run((speed1))
        self.motor2.run((speed2))
        wait(amount)
        self.motor1.stop()
        self.motor2.stop()
    def start_tank(self, speed1, speed2):
        self.motor1.run((speed1))
        self.motor2.run((speed2))           
    def stop_tank(self):
        self.motor1.hold()
        self.motor2.hold()
# Write your program here.

motors = MotorPair(Port.A, Port.D)

# def proportionalAlignDisplay():
#     display.off()
#     display.pixel(0,1)
#     display.pixel(0,2)
#     display.pixel(0,3)
#     display.pixel(1,1)
#     display.pixel(1,3)
#     display.pixel(2,1)
#     display.pixel(2,2)
#     display.pixel(2,3)
#     display.pixel(3,1)
#     display.pixel(4,1)

# def proportionalAlign(errorE,errorD, kP):
#     # proportionalAlignDisplay()
#     name ='proportional align'
#     move_side = ''
#     log='failed'
#     leftMotorSpd = 300 + (errorE * kP * 4.7)
#     rightMotorSpd = 300 + (errorD * kP * 4.7)
#     motors.start_tank(leftMotorSpd,rightMotorSpd)
#     diff_l_r = leftMotorSpd - rightMotorSpd
#     if diff_l_r > 0:
#         move_side = 'right'
#     else:
#         move_side = 'left'
#     log = 'succeded'
#     return [name, move_side, log]

sc = ColorSensor(Port.S3)
sd = ColorSensor(Port.S2)
se = ColorSensor(Port.S1)
setPoint = 50
# while True:
#     se_value = se.reflection()
#     sd_value = sd.reflection()
#     sc_value = sc.reflection()
#     errord = se_value - setPoint
#     errore = sd_value - setPoint
#     proportionalAlign(errore,errord,1.2)

def axis_correction(last_move, corner = 0, set_point_c = 40, set_point_s = 75):
        # axisCorrectionDisplay()
        name = ''
        move_side = ''
        log = ''
        if last_move != "axis correction **Corner**" or last_move != "axis correction **Suave**":
            corner = 0
        if corner > 3:
            motors.stop_tank()
            if sd.reflection() < set_point_s:
                while sd.reflection() < set_point_s:
                    motors.start_tank(-150,0)
                    move_side = 'right'
            if se.reflection() < set_point_s : 
                while se.reflection() < set_point_s:
                    motors.start_tank(0,-150)
                    move_side = 'left'
            if corner == 5:
                corner == 0
            name = "axis correction **Suave**"
            log = 'succeded'
        else:
            if sd.reflection() > se.reflection():
                while sd.reflection() > set_point_c:
                    motors.start_tank(300,-50)
                    move_side = 'right'
                corner += 1
            else:
                while se.reflection() > set_point_c:
                    motors.start_tank(-50,300)
                    move_side = 'left'
                corner += 1
            name = "axis correction **Corner**"
            log = 'succeded'
        return [name, move_side, log]

while True:
    axis_correction("")

            hsv_obj = sensor.hsv()
            hsv_med[0] += hsv_obj.h
            hsv_med[1] += hsv_obj.s
            hsv_med[2] += hsv_obj.v
            print(hsv_med)
        for i in range(3):
            hsv_med[i] = hsv_med[i]/200
            hsv_min[i] = hsv_med[i] - 20
            hsv_max[i] = hsv_med[i] + 20  
            # if hsv_obj.h < hsv_min[0] or hsv_min[0] == 0 :
            #     hsv_min[0] = hsv_obj.h
            # if hsv_obj.s < hsv_min[1] or hsv_min[1] == 0 :
            #     hsv_min[1] = hsv_obj.s
            # if hsv_obj.v < hsv_min[2] or hsv_min[2] == 0 :
            #     hsv_min[2] = hsv_obj.v
            # if hsv_obj.h > hsv_max[0]:
            #     hsv_max[0] = hsv_obj.h
            # if hsv_obj.s > hsv_max[1]:
            #     hsv_max[1] = hsv_obj.s
            # if hsv_obj.v > hsv_max[2]:
            #     hsv_max[2] = hsv_obj.v
            
            wait(50)
        hsv_values = [hsv_min, hsv_max]
        print(hsv_values)
        return hsv_values
    def checkGreen(self, valores):
        valuesE = valores[0]
        valuesD = valores[1]
        sensor_d = self.sd.hsv()
        sensor_e = self.se.hsv()
        direita = False
        esquerda = False
        # print(sensor)
        # if sensor.h < values[0][0] or sensor.h > values[1][0]:
        #     return False
        # if sensor.s < values[0][1] or sensor.s > values[1][1]:
        #     return False
        # if sensor.v < values[0][2] or sensor.v > values[1][2]:
        #     return False
        if sensor_d.h > valuesD[0][0] and sensor_d.h < valuesD[1][0]:
            if sensor_d.s > valuesD[0][1] and sensor_d.s < valuesD[1][1]:
                if sensor_d.v > valuesD[0][2] and sensor_d.v < valuesD[1][2]:
                    direita = True
        if sensor_e.h > valuesE[0][0] and sensor_e.h < valuesE[1][0]:
            if sensor_e.s > valuesE[0][1] and sensor_e.s < valuesE[1][1]:
                if sensor_e.v > valuesE[0][2] and sensor_e.v < valuesE[1][2]:
                    esquerda = True
        return [esquerda, direita]
